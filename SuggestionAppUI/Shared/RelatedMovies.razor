@using TMDbLib.Objects.Search

@inject ApiMovie apiMovie

<div class="row">
    <h3>Related Movies:</h3>
    @if (_recomendations is not null)
    {
        @foreach (var movie in _recomendations)
        {
            <div class="movie-item-style-2 alink" @onclick="@(() => OnClick.InvokeAsync(@movie.Id))" >
                <img src="@(apiConfiguration.Images.SecureBaseUrl + "w500" + movie.PosterPath)" alt="">
                <div class="mv-item-infor">
                    <h6><a>@movie.Title <span>@movie.ReleaseDate?.Year.ToString()</span></a></h6>
                    <p class="rate"><i class="ion-android-star"></i><span>@movie.VoteAverage.ToString("0.0")</span> /10</p>
                    <p class="describe">@movie.Overview ...</p>
                    <p class="run-time"> <span>Release: @movie.ReleaseDate?.ToString("MMMM dd, yyyy")</span></p>
                </div>
            </div>
        }

    }

</div>


@code {

    [Parameter]
    public List<SearchMovie>?  recomendations { get; set; }

    private APIConfiguration apiConfiguration;
    private List<SearchMovie>? _recomendations;

    [Parameter] public EventCallback<int> OnClick { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (recomendations is not null)
            {

                apiConfiguration = await apiMovie.GetConfiguration();
                _recomendations = recomendations.Take(10).ToList();
            }

        }

    }


    public async Task LoadRelatedMovies(List<SearchMovie>? recomendations)
    {
        if(recomendations is not null)
        {
            _recomendations = recomendations.Take(10).ToList();
            StateHasChanged();
        }
   
    }




}
