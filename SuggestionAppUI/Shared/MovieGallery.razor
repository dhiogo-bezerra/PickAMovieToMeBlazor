@inject ApiMovie apiMovie


<div>
	<div class="rv-hd">
		<div>
			<h3>Videos & Photos of</h3>
	
		</div>
	</div>
	<div class="title-hd-sm">
		<h4>Photos @if (_filteredImages is not null)
			{
				<span> - @_filteredImages.Count()</span>
			}
		</h4>
	</div>
	<div class="mvsingle-item media-item">
			@if(_filteredImages is not null)
			{ 
				@foreach (var row in _filteredImages.ToArray().Split(2))
					{
						 <div class="row">
							@foreach (var backdrop in row)
							 {
								<div class="col-md-6 col-sm-12 col-xs-12">
									<div class="blog-item-style-2">
										<a href="@(apiConfiguration.Images.SecureBaseUrl + "original" + backdrop.FilePath)"  target="_blank" rel="noopener noreferrer"><img src="@(apiConfiguration.Images.SecureBaseUrl + "w300" + backdrop.FilePath)" alt=""></a>
									</div>
								</div>	
							 }
						  </div>
}
											
			}

	

	</div>
</div>




@code {

	[Parameter]
	public List<ImageData>? filteredImages  { get; set; }

	private List<ImageData>? _filteredImages;
	private APIConfiguration apiConfiguration;


	protected async override Task OnInitializedAsync()
	{

	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			if(filteredImages is not null)
			{
				apiConfiguration = await apiMovie.GetConfiguration();
				_filteredImages = filteredImages;
			}

		}
	}

	public async Task LoadGallery(List<ImageData> filteredImages)
	{
		if(filteredImages is not null)
		{
			_filteredImages = filteredImages.DistinctBy(f => f.FilePath).OrderByDescending(f => f.VoteAverage).Take(8).ToList();
		}
		else
		{
			_filteredImages = null;
		}

		StateHasChanged();
	}
}
