@page "/"
@inject IJSRuntime jsRunTime;
@inject IMovieDbData movieData
@inject ApiMovie apiMovie
@inject NavigationManager navManager
@inject ProtectedLocalStorage localStorage
@inject NavigationManager navManager

@if (isLoading)
{
    <div id="preloader">
        <div id="status">
            <span></span>
            <span></span>
        </div>
    </div>
}


<div class="slider movie-items" style="background-image: url('@movieHeader'); background-repeat:no-repeat;">
    <div class="container">
        <div class="row">
            <div class="social-link">
            </div>
            <div class="slick-multiItemSlider">
                @if (movies is not null)
                {
                    @foreach (var movie in movies)
                    {
                        <div class="movie-item">
                            <div class="mv-img">
                                <a class="alink" @onclick="@(() => LoadMovie(movie.TmdbId.ToString()))"><img src=@(apiConfiguration.Images.SecureBaseUrl + "w500" + movie.PosterPath) alt="" width="285" height="437"></a>
                            </div>
                            <div class="title-in">
                                <div class="cate">
                                    @foreach (var genre in movie.Genres.Split(",").Take(4))
                                    {
                                        <span class="@ColorGenre(@genre)">@genre</span>
                                    }

                                </div>
                                <h6><a class="alink" @onclick="@(() => LoadMovie(movie.TmdbId.ToString()))">@movie.Title</a></h6>
                                <p><i class="ion-android-star"></i><span>@movie.VoteAverage</span> /10</p>
                            </div>
                        </div>
                    }
                }

            </div>
        </div>
    </div>
</div>
<div class="buster-light">
    <div class="movie-items">
        <div class="container">
            <div class="row ipad-width">
                <div class="col-md-8">
                    <div class="title-hd">
                        <h2>Top Ranked</h2>
                        <a href="#" class="viewall">View all <i class="ion-ios-arrow-right"></i></a>
                    </div>
                    <div class="tabs">
                        <ul class="tab-links">
                            <li class="active"><a href="#tab1"></a></li>
                        </ul>
                        <div class="tab-content">
                            <div id="tab1" class="tab active">
                                <div class="row">
                                    <div class="slick-multiItem">
                                        @if (topRankedMovies is not null)
                                        {
                                            @foreach (var movie in topRankedMovies)
                                            {

                                                <div class="slide-it">
                                                    <div class="movie-item">
                                                        <div class="mv-img">
                                                            <img src=@(apiConfiguration.Images.SecureBaseUrl + "w342" + movie.PosterPath) alt="" width="185" height="284">
                                                        </div>
                                                        <div class="hvr-inner">
                                                            <a class="alink" @onclick="@(() => LoadMovie(movie.TmdbId.ToString()))"> Read more <i class="ion-android-arrow-dropright"></i> </a>
                                                        </div>
                                                        <div class="title-in">
                                                            <h6><a>@movie.Title</a></h6>
                                                            <p><i class="ion-android-star"></i><span>@movie.VoteAverage</span> /10</p>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="title-hd">
                        <h2>Popular Movies</h2>
                        <a href="#" class="viewall">View all <i class="ion-ios-arrow-right"></i></a>
                    </div>
                    <div class="tabs">
                        <ul class="tab-links">
                            <li class="active"><a href="#tab21"></a></li>
                        </ul>
                        <div class="tab-content">
                            <div id="tab21" class="tab active">
                                <div class="row">
                                    <div class="slick-multiItem">
                                        @if (popularMovies is not null)
                                        {
                                            @foreach (var movie in popularMovies)
                                            {

                                                <div class="slide-it">
                                                    <div class="movie-item">
                                                        <div class="mv-img">
                                                            <img src=@(apiConfiguration.Images.SecureBaseUrl + "w342" + movie.PosterPath) alt="" width="185" height="284">
                                                        </div>
                                                        <div class="hvr-inner">
                                                            <a class="alink" @onclick="@(() => LoadMovie(movie.TmdbId.ToString()))"> Read more <i class="ion-android-arrow-dropright"></i> </a>
                                                        </div>
                                                        <div class="title-in">
                                                            <h6><a>@movie.Title</a></h6>
                                                            <p><i class="ion-android-star"></i><span>@movie.VoteAverage</span> /10</p>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="sidebar">
                        <div class="celebrities">
                            <h4 class="sb-title">Spotlight Directors</h4>
                            @if (directors is not null)
                            {
                                @foreach (var director in directors)
                                {

                                    <div class="celeb-item">
                                        <h4>@GetInitials(@director.Item1)</h4>
                                        <div class="celeb-author">
                                            <h6 @onclick='(() => SeeMoviesFromDirector(director.Item1))'><a href="">@director.Item1</a></h6>
                                            <span>Total Movies: @director.Item2</span>
                                        </div>
                                    </div>
                                }
                            }

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

@code {

    private List<MovieDbModel>? movies;
    private APIConfiguration apiConfiguration;
    private string movieHeader = "";
    private bool isLoading = true;
    private List<MovieDbModel>? topRankedMovies;

    private List<MovieDbModel>? popularMovies;
    private List<Tuple<string, int>>? directors;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            apiConfiguration = await apiMovie.GetConfiguration();
            movies = await movieData.GetRandomMovie(10);

            var movieApi = await apiMovie.GetMovie(movies.First().TmdbId);
            movieHeader = apiConfiguration.Images.SecureBaseUrl + "w1920_and_h800_multi_faces" + movieApi.BackdropPath;

            var allMovies = await movieData.GetAllMovies();
            topRankedMovies = allMovies.OrderByDescending(f => f.VoteAverage).Take(12).ToList();
            popularMovies = allMovies.OrderByDescending(f => f.VoteCount).Take(12).ToList();

            directors = allMovies.GroupBy(userInfo => userInfo.Directors)
            .OrderBy(group => group.Key)
            .Select(group => Tuple.Create(group.Key, group.Count())).OrderByDescending(f => f.Item2).Take(12).ToList();

            isLoading = false;
            StateHasChanged();

            await jsRunTime.InvokeAsync<IJSObjectReference>("import", "/js/custom.js");
            await jsRunTime.InvokeVoidAsync("SliderInit");


        }
    }

    protected string ColorGenre(string genre)
    {
        switch (genre.Trim())
        {
            case "War":
            case "Horror":
            case "Film-Noir":
            case "Mystery":
                return "black";
                break;

            case "Sci-Fi":
            case "Fantasy":
            case "Western":
            case "Thriller":
                return "orange";
                break;

            case "Short":
            case "Music":
            case "Musical":
            case "Sport":
                return "yell";
                break;

            case "Documentary":
            case "History":
            case "Biography":
            case "Drama":
                return "green";
                break;

            case "Action":
            case "Adventure":
            case "Comedy":
            case "Crime":
                return "red";

            case "Family":
            case "Animation":
            case "News":
                return "purple";

            default:
                return "blue";

        }

    }

    public void LoadMovie(string MovieId)
    {
        navManager.NavigateTo("/Movie/" + MovieId);
    }

    private string GetInitials(string Name)
    {
        var arrayName = Name.Split(' ');
        //If only has one name
        if (arrayName.Count() == 1)
        {
            return arrayName[0].Substring(0, 2);
        }
        else
        {
            return arrayName[0].Substring(0, 1) + arrayName[arrayName.Count() - 1].Substring(0, 1);
        }
    }

    private async Task SeeMoviesFromDirector(string Director)
    {
        //Cleaning Local storage filters and setting the Director name
        await localStorage.SetAsync("FilterTitle", "");
        await localStorage.SetAsync("FilterDirector", Director);
        await localStorage.SetAsync("FilterLanguage", "");
        await localStorage.SetAsync("FilterFromYear", "");
        await localStorage.SetAsync("FilterToYear", "");
        await localStorage.SetAsync("FilterRange", "");
        await localStorage.SetAsync("SelectedGenre", Array.Empty<string>());
        await localStorage.SetAsync("SelectLists", Array.Empty<string>());

        navManager.NavigateTo("/MovieList");
    }

}
