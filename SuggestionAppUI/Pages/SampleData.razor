@page "/SampleData"
@using System.IO
@using Newtonsoft.Json
@using System.Threading
@inject IUserData userData
@inject IMovieListData movieListData
@inject IMovieDbData movieDbData;
@inject IGenreData genreDbData;
@inject ApiMovie apiMovie

<h3>SampleData</h3>
<div class="buster-light" style="padding-top: 400px;">

    @if (listCreated)
    {
        <h4>Movie List have been created</h4>
    }
    else
    {
        <button class="btn btn-primary" @onclick="CreateMovieList">Create Movie List</button>
    }

    <button class="btn btn-primary" @onclick="CreateMovieDatabaseFromFiles">Create Movies from file</button>

    <button class="btn btn-primary" @onclick="UpdateMovieDatabase">Update Movie on Database</button>
    <button class="btn btn-primary" @onclick="CreateGenres">Update Genres on Database</button>
    <button class="btn btn-primary" @onclick="GetAllLanguages">GetAllLanguages</button>

</div>
@code {

    private bool listCreated = false;


    public async Task CreateMovieDatabaseFromFiles()
    {
        try
        {
            var movies = new List<MovieDbModel>();
            var movieslist = await movieListData.GetAllLists();

            string rootpath = System.IO.Path.Combine(System.IO.Directory.GetCurrentDirectory(), "wwwroot");
            var filePath = rootpath + @"/Json/";

            string[] fileArray = Directory.GetFiles(filePath);

            foreach (var file in fileArray)
            {

                using (StreamReader r = new StreamReader(file))
                {
                    //Getting the filename without the extension

                    var fileName = Path.GetFileName(file).Replace(".json", "");

                    string jsonString = r.ReadToEnd();
                    var movieListFile = JsonConvert.DeserializeObject<List<MovieDbModel>>(jsonString);

                    MovieListModel listOfFile = movieslist.FirstOrDefault(f => f.Name.Contains(fileName));

                    if (listOfFile is not null)
                    {
                        var basicListModel = new BasicMovieListModel(listOfFile);

                        foreach (MovieDbModel movie in movieListFile)
                        {

                            //Check if movie is in database. If not, add
                            var movieInDatabase = await movieDbData.GetMovieByImdbId(movie.Const);

                            if (movieInDatabase is null)
                            {

                                //adding movie list to the movie document
                                movie.MemberOf.Add(basicListModel);

                                //Movie don`t exist in database. Create
                                await movieDbData.CreateMovie(movie);
                            }
                            else
                            {
                                //Check if listId is already on the movie on database
                                if (!movieInDatabase.MemberOf.Any(m => m.Id == basicListModel.Id))
                                {
                                    //Add movieList to movie in database
                                    await movieDbData.AddListToMovie(movieInDatabase.Id, basicListModel);
                                }
                            }

                        }
                    }
                    else
                    {
                        //List name not found in database
                        var notFound = fileName;
                    }



                }

            }
        }
        catch (Exception ex)
        {
            var error = ex.Message;
        }


        var final = "";
    }

    private async Task CreateMovieList()
    {
        var movieLists = await movieListData.GetAllLists();

        if (movieLists?.Count > 0)
        {
            listCreated = true;
            return;
        }

        await movieListData.CreateList(new MovieListModel { Name = "1001 Movies You Must See Before You Die", Description = "1001 Movies You Must See Before You Die" });
        await movieListData.CreateList(new MovieListModel { Name = "AFI 100", Description = "The 100 Greatest American Films Of All Time by the American Film Institute." });
        await movieListData.CreateList(new MovieListModel { Name = "Criterion Colletcion", Description = "Movies distributed by Criterion Collection. The Criterion Collection, Inc. is an American home-video distribution company that focuses on licensing, restoring and distributing 'important classic and contemporary films.' Criterion serves film and media scholars, cinephiles and public and academic libraries." });
        await movieListData.CreateList(new MovieListModel { Name = "r/TrueFilm", Description = "List made by the most voted movies in the subreddit TrueFilm: : An in-depth discussion of film" });
        await movieListData.CreateList(new MovieListModel { Name = "Martin Scorsese Recommended movies", Description = "A list curated by Martin Scorsese." });
        await movieListData.CreateList(new MovieListModel { Name = "Cannes", Description = "Cannes Award Winners and Runners-Up: 2019-1939" });
        await movieListData.CreateList(new MovieListModel { Name = "OscarDirector", Description = "Academy Award for Best Directing: Winners & Nominees" });
        await movieListData.CreateList(new MovieListModel { Name = "OscarForeign", Description = "Academy Award for Best International Feature Film: Winners & Nominees" });
        await movieListData.CreateList(new MovieListModel { Name = "OscarPicture", Description = "Academy Award for Best Picture: Winners & Nominees" });
        await movieListData.CreateList(new MovieListModel { Name = "OscarScreenplay", Description = "Academy Award for Writing (Original Screenplay): Winners & Nominees" });



        listCreated = true;
    }

    public async Task UpdateMovieDatabase()
    {
        try
        {
            var movies = await movieDbData.GetAllMovies();
            //movies = movies.Where(f => f.TmdbId == 0).ToList();

            foreach (var movie in movies)
            {
                var idTmdb = await apiMovie.getTmdbIdByImdbId(movie.Const);
                //Sleeping so the api is not called in so short time period
                Thread.Sleep(1000);

            }


        }
        catch (Exception ex)
        {
            var error = ex.Message;
        }

    }

    public async Task CreateGenres()
    {
        var movies = await movieDbData.GetAllMovies();

        //Get Genres
        var dinstinctGenres = movies
        .GroupBy(p => p.Genres)
        .Select(g => g.First())
        .ToList();

        var hashset = new HashSet<string>();
        foreach (var item in dinstinctGenres)
        {
            foreach (var genre in item.Genres.Split(',').ToList<string>())
            {
                hashset.Add(genre.Trim());
            }
        }

        string names = string.Join(",", hashset);

        foreach (var genre in hashset)
        {
            await genreDbData.CreateGenre(new GenreModel { Name = genre });
        }

        //_movieList = _movieList.Take(23).ToList();
    }

    public async Task GetAllLanguages()
    {
        var movies = await movieDbData.GetAllMovies();

        //Get all Original Languages on database

        var distinctLanguage = movies
        .GroupBy(p => p.OriginalLanguage)
        .Select(g => g.First())
        .ToList();

        var hashset = new HashSet<string>();
        foreach (var item in distinctLanguage)
        {
            
            hashset.Add(item.OriginalLanguage.Trim());
            
        }

        string names = string.Join(",", hashset);

        //_movieList = _movieList.Take(23).ToList();
    }
}
